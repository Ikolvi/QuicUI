// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/data/local/screen_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 1692653621568995334),
    name: 'ScreenEntity',
    lastPropertyId: const obx_int.IdUid(12, 1436513806790551489),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3438356346466015509),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7253497795178484720),
        name: 'screenId',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 8047035678905288981),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6175512245848131168),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7033390485339517638),
        name: 'version',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8685981666230253854),
        name: 'jsonData',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5627911529857192045),
        name: 'lastUpdated',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4027841994371509761),
        name: 'syncStatus',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 632882869994888239),
        name: 'failedAttempts',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1863071544615290076),
        name: 'localModifiedAt',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6790887327170337489),
        name: 'isDeleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 6081015782424924380),
        name: 'hasConflict',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1436513806790551489),
        name: 'remoteVersion',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(1, 1692653621568995334),
    lastIndexId: const obx_int.IdUid(1, 8047035678905288981),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ScreenEntity: obx_int.EntityDefinition<ScreenEntity>(
      model: _entities[0],
      toOneRelations: (ScreenEntity object) => [],
      toManyRelations: (ScreenEntity object) => {},
      getId: (ScreenEntity object) => object.id,
      setId: (ScreenEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ScreenEntity object, fb.Builder fbb) {
        final screenIdOffset = fbb.writeString(object.screenId);
        final nameOffset = fbb.writeString(object.name);
        final jsonDataOffset = fbb.writeString(object.jsonData);
        final syncStatusOffset = fbb.writeString(object.syncStatus);
        final remoteVersionOffset = object.remoteVersion == null
            ? null
            : fbb.writeString(object.remoteVersion!);
        fbb.startTable(13);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, screenIdOffset);
        fbb.addOffset(2, nameOffset);
        fbb.addInt64(3, object.version);
        fbb.addOffset(4, jsonDataOffset);
        fbb.addInt64(5, object.lastUpdated);
        fbb.addOffset(6, syncStatusOffset);
        fbb.addInt64(7, object.failedAttempts);
        fbb.addInt64(8, object.localModifiedAt);
        fbb.addBool(9, object.isDeleted);
        fbb.addBool(10, object.hasConflict);
        fbb.addOffset(11, remoteVersionOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final screenIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final jsonDataParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final object =
            ScreenEntity(
                screenId: screenIdParam,
                name: nameParam,
                jsonData: jsonDataParam,
              )
              ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
              ..version = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                10,
                0,
              )
              ..lastUpdated = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                14,
                0,
              )
              ..syncStatus = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 16, '')
              ..failedAttempts = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                18,
                0,
              )
              ..localModifiedAt = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                20,
                0,
              )
              ..isDeleted = const fb.BoolReader().vTableGet(
                buffer,
                rootOffset,
                22,
                false,
              )
              ..hasConflict = const fb.BoolReader().vTableGet(
                buffer,
                rootOffset,
                24,
                false,
              )
              ..remoteVersion = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 26);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ScreenEntity] entity fields to define ObjectBox queries.
class ScreenEntity_ {
  /// See [ScreenEntity.id].
  static final id = obx.QueryIntegerProperty<ScreenEntity>(
    _entities[0].properties[0],
  );

  /// See [ScreenEntity.screenId].
  static final screenId = obx.QueryStringProperty<ScreenEntity>(
    _entities[0].properties[1],
  );

  /// See [ScreenEntity.name].
  static final name = obx.QueryStringProperty<ScreenEntity>(
    _entities[0].properties[2],
  );

  /// See [ScreenEntity.version].
  static final version = obx.QueryIntegerProperty<ScreenEntity>(
    _entities[0].properties[3],
  );

  /// See [ScreenEntity.jsonData].
  static final jsonData = obx.QueryStringProperty<ScreenEntity>(
    _entities[0].properties[4],
  );

  /// See [ScreenEntity.lastUpdated].
  static final lastUpdated = obx.QueryIntegerProperty<ScreenEntity>(
    _entities[0].properties[5],
  );

  /// See [ScreenEntity.syncStatus].
  static final syncStatus = obx.QueryStringProperty<ScreenEntity>(
    _entities[0].properties[6],
  );

  /// See [ScreenEntity.failedAttempts].
  static final failedAttempts = obx.QueryIntegerProperty<ScreenEntity>(
    _entities[0].properties[7],
  );

  /// See [ScreenEntity.localModifiedAt].
  static final localModifiedAt = obx.QueryIntegerProperty<ScreenEntity>(
    _entities[0].properties[8],
  );

  /// See [ScreenEntity.isDeleted].
  static final isDeleted = obx.QueryBooleanProperty<ScreenEntity>(
    _entities[0].properties[9],
  );

  /// See [ScreenEntity.hasConflict].
  static final hasConflict = obx.QueryBooleanProperty<ScreenEntity>(
    _entities[0].properties[10],
  );

  /// See [ScreenEntity.remoteVersion].
  static final remoteVersion = obx.QueryStringProperty<ScreenEntity>(
    _entities[0].properties[11],
  );
}
